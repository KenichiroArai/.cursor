---
description: Java実装時のルール
globs: src/**/*.java
alwaysApply: false
---
# プロジェクトの指示

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：

- 指示
  {{instructions}}

この指示を元に、以下のプロセスに従って作業を進めてください：

---

## 1. 指示の分析と計画

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。

### タスク分析

- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
  - **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。

### 重複実装の防止

実装前に以下の確認を行ってください

- 既存の類似機能の有無
- 同名または類似名の関数やコンポーネント
- 重複するAPIエンドポイント
- 共通化可能な処理の特定

## 2. タスクの実行

- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実装時は以下の点に注意してください
  - 適切なディレクトリ構造の遵守
  - 命名規則の一貫性維持
  - 共通処理の適切な配置

## 3. 品質管理と問題対応

- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合が発生した場合は、以下のプロセスで対応してください
  - 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
  - 対策案の作成と実施
  - 修正後の動作検証
  - デバッグログの確認と分析

- 検証結果は以下の形式で記録してください
  - 検証項目と期待される結果
  - 実際の結果と差異
  - 必要な対応策（該当する場合）

## 4. 最終確認

- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
- 実装した機能に重複がないことを最終確認してください。

## 5. 結果報告

以下のフォーマットで最終的な結果を報告してください：

```markdown
    # 実行結果報告

    ## 概要

    [全体の要約を簡潔に記述]

    ## 実行ステップ
    1. [ステップ1の説明と結果]
    2. [ステップ2の説明と結果]
    ...

    ## 最終成果物

    [成果物の詳細や、該当する場合はリンクなど]

    ## 課題対応（該当する場合）

    - 発生した問題と対応内容
    - 今後の注意点

    ## 注意点・改善提案

    - [気づいた点や改善提案があれば記述]
```

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---

## 共通のコーディングルール

### メソッドの戻り値

- メソッドの戻り値は変数`result`で定義
- メソッドの戻り値の変数は先頭で宣言
- return文は`return result;`に統一

### 処理コメント

- 機能ごと、処理のまとまり単位に`/* コメント */`で記載
- 通常コメントは`//`で記載

### Javadoc

- 修飾子に限らず必須
- Javadocルールに従う

### 早期リターンパターン

- 早期リターンパターンを使用し、不要なネストを避ける

#### 基本的な指示

早期リターンパターンを使用してコードを書いてください。

#### 詳細な指示

コードの可読性を高めるため、以下の方針でコードを書いてください：
    - ネストを減らすため、条件が満たされない場合は早期にreturnする
    - if-elseの代わりに、ガード節（早期リターン）を使用する
    - インデントの深さを最小限に抑える

#### 具体例を含む指示

以下のような形式でコードを書いてください：

```java

// 望ましくない形式:
if (condition) {
    // 処理A
    // 処理B
}

// 望ましい形式:
if (!condition) {
    return result;
}
// 処理A
// 処理B
```

#### メリット

- コードの可読性が向上
- ネストの深さが減少
- 処理の流れが明確になる
- メンテナンス性の向上

#### 使用シーン

- メソッドやフローの入り口でのバリデーション
- 例外的なケースの早期処理
- 条件分岐が多い処理の簡略化

#### コード例

```java
public boolean someMethod(String input) {
    boolean result = false;  // 先頭で戻り値変数を宣言

    // 早期リターン（ガード節）
    if (input == null) {
        return result;
    }

    // メインの処理
    result = true;

    return result;  // 統一された形式でreturn
}
```

## テストのコーディングルール

### テスト単位

メソッド単位で行う。privateメソッドの場合は`kmg.core.infrastructure.model.impl.KmgReflectionModelImpl`を使用してテストメソッドを実装する。

### テストクラスのアノテーション

下記のアノテーションを設定する。

```Java
@SuppressWarnings({
    "nls", "static-method"
})
```

### テストメソッド名

- `testXxx_パターンYyy`の形式とする。
- 「Xxx」の先頭は大文字で対象となるメソッド名を入れる。
- 「パターン」は正常系の場合は「normal」、準正常系の場合は「semi」、異常系の場合は「error」とする。
- 「Yyy」の先頭は大文字でテスト項目を入れる。
- 例
  正常系:testXxx_normalYyy
  準正常系:testXxx_semiYyy
  異常系:testXxx_errorYyy

### テストメソッドのアクセス修飾子

- `testXXX`メソッドのアクセス修飾子を全て`public`にする。

### テストメソッドの中身

- テストは対象となるメソッドごとに行う。
- 1つのテストメソッドに1つのテストを実装する。
- 正常系、準正常系、異常系に分けて実装する。
  - 正常系:正常処理が完了するパターン。例：正常にreturn文の実行され、throwされない。
  - 準正常系:処理が正しく完了しないパターン。例：引数の不正によるエラーによりreturn文またはthrowされる。
  - 異常系:正常系、準正常系以外の想定外のパターン。例：データベースの接続エラーによりthrowされる。

### テストメソッドのJavaDoc

#### フォーマット

`対象メソッド名 メソッドのテスト - パターン:テスト内容`

パターンは正常系、準正常系、異常系を入れる。

#### コード例

```Java
/**
 * targetMethod メソッドのテスト - 引数が1文字の場合
 */
```

### テストコードの実装順序

下記の順番で実装してください。

1. 期待値の定義

- `/* 期待値の定義 */`のコメントを入れる。
- `expected`で始まる期待値を定義する。

2. 準備

- `/* 準備 */`のコメントを入れる。
- テスト対象を行うために準備しておくべき処理。
- `test`で始まる変数で定義する。

3. テスト対象の実行

- `/* テスト対象の実行 */`のコメントを入れる。
- `test`で始まる変数で定義する。
- テスト対象を実行する。

4. 検証の準備

- `/* 検証の準備 */`のコメントを入れる。
- `actual`で始まる実際の値を定義する。

5. 検証の実施

- `/* 検証の実施 */`のコメントを入れる。
- `Assertions.assertTrue`は`actualXXX`と説明を記載する。
- `Assertions.assertEquals`は`actualXXX`と説明を記載する。
- `Assertions.assertEquals`は`expectedXXX`と`actualXXX`と説明を記載する。

### 検証方法の指定

- 1行1行で検証する
- 極力、`Assertions.assertEquals`を使用する
- `Assertions.assertTrue`または`Assertions.assertFalse`は、`Assertions.assertEquals`で代行できる場合は代行する。ただし、`condition`が`boolean`であれば、`Assertions.assertTrue`または`Assertions.assertFalse`を使用する
- `instanceof`の比較は`Assertions.assertInstanceOf`を使用する

### メッセージの検証

- コード例に習い、メッセージは1行ずつ検証を行う

#### メッセージの検証のコード例

```java
@Test
public void testMethod() {

    /* 期待値の定義 */
    final String[] expectedOutputLines = {
            "メッセージ1",
            "メッセージ2",
            "メッセージ3",
    };
    /* 準備 */

    /* テスト対象の実行 */

    /* 検証の準備 */
    final String[] actualMsgs = this.listAppender.list.stream().map(ILoggingEvent::getMessage)
        .toArray(String[]::new);

    /* 検証の実施 */

    // ログのチェック
    final int verMsgLengh = Math.min(expectedMsgs.length, actualMsgs.length);

    for (int i = 0; i < verMsgLengh; i++) {

        Assertions.assertEquals(expectedMsgs[i], actualMsgs[i], String.format("メッセージが一致しません: %s", expectedMsgs[i]));

    }

    // ログの数のチェック
    Assertions.assertEquals(expectedMsgs.length, actualMsgs.length);

}
```

---

## Javadoc のフォーマットルール

### Javaプログラムのための標準的かつ包括的なJavadocフォーマットの例を示します：

```java
/**
 * クラスの説明をここに書きます。
 * 複数行の説明の場合は、このように記述します。
 *
 * @author 作成者名
 * @version バージョン番号
 * @since いつからこのクラスが存在するか（例：JDK1.8）
 */
public class SampleClass {

    /**
     * フィールドの説明をここに書きます。
     */
    private String field;

    /**
     * メソッドの説明をここに書きます。
     * 処理の詳細や目的を記述します。
     *
     * @param param1 最初のパラメータの説明
     * @param param2 2番目のパラメータの説明
     * @return 戻り値の説明
     * @throws Exception1 例外が発生する条件の説明
     * @throws Exception2 別の例外が発生する条件の説明
     * @see 関連するクラスやメソッドへの参照
     * @deprecated 非推奨となった場合の説明（該当する場合）
     */
    public String sampleMethod(String param1, int param2) throws Exception {
        // メソッドの実装
    }
}
```

主要なタグの説明：

基本的なタグ：
```
@param  - メソッドのパラメータの説明
@return - 戻り値の説明
@throws - 発生する可能性のある例外の説明
@author - 作成者
@version - バージョン情報
@since  - 導入されたバージョン
@see    - 関連する他のクラスやメソッドへの参照
```

追加的なタグ：
```
@deprecated - 非推奨であることを示す
@link      - 他のクラスやメソッドへのリンク
@code      - コードの例を示す
@value     - 定数値を参照する
@serial    - シリアライズに関する情報
```

記述のガイドライン：

1. 最初の文：
```java
/**
 * この最初の文は要約文として扱われます。
 * 簡潔で明確な説明を書きます。
 */
```

2. コードの例の記述：
```java
/**
 * サンプルコードの使用例：
 * <pre>
 * {@code
 *     String result = obj.sampleMethod("test", 123);
 * }
 * </pre>
 */
```

3. リンクの使用：
```java
/**
 * 詳細は{@link OtherClass#otherMethod()}を参照してください。
 */
```

4. 箇条書きの使用：
```java
/**
 * このメソッドは以下の処理を行います：
 * <ul>
 * <li>データの検証</li>
 * <li>データの変換</li>
 * <li>結果の保存</li>
 * </ul>
 */
```

一般的な記述の原則：

1. 簡潔で明確な文章を使用する
2. 完全な文章で記述する
3. 技術的な正確さを保つ
4. 必要な情報を漏れなく記載する
5. HTMLタグを適切に使用する

チーム開発での統一フォーマット例：

```java
/**
 * [クラス/メソッド/フィールドの名前]の説明
 *
 * 詳細な説明（必要な場合）
 *
 * 業務ロジックの説明（必要な場合）
 *
 * @author      作成者 <email@example.com>
 * @param       [引数名] [引数の説明]
 * @return      [戻り値の説明]
 * @throws      [例外クラス名] [例外の発生条件]
 * @see         [参照すべき他のクラスやメソッド]
 * @since       [追加されたバージョン]
 * @version     [現在のバージョン]
 * @deprecated  [非推奨となった理由と代替手段]（該当する場合）
 */
```

このフォーマットは必要に応じてカスタマイズし、プロジェクトの要件に合わせて調整することができます。

---

## 順守

以上の内容を順守し、タスクを遂行してください。
